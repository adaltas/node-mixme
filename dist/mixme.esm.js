function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

// Generated by CoffeeScript 2.4.1
var _snake_case, _clone, is_object, is_object_literal, merge, _mutate, _snake_case2;

merge = function merge() {
  return _mutate.apply(void 0, [{}].concat(Array.prototype.slice.call(arguments)));
};

_clone = function clone(target) {
  if (Array.isArray(target)) {
    return target.map(function (element) {
      return _clone(element);
    });
  } else if (target && _typeof(target) === 'object') {
    return _mutate({}, target);
  } else {
    return target;
  }
};

_mutate = function mutate() {
  var i, j, name, ref, source, target;
  target = arguments[0];

  for (i = j = 1, ref = arguments.length; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
    source = arguments[i];

    if (is_object_literal(target) && is_object_literal(source)) {
      for (name in source) {
        target[name] = _mutate(target[name], source[name]);
      }
    } else if (source !== void 0) {
      target = source;
    }
  }

  return target;
};

_snake_case2 = function snake_case(source) {
  var convert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var name, src, target, u;
  target = {};

  if (is_object_literal(source)) {
    u = typeof convert === 'number' && convert > 0 ? convert - 1 : convert;

    for (name in source) {
      src = source[name];

      if (convert) {
        name = _snake_case(name);
      }

      target[name] = _snake_case2(src, u);
    }
  } else {
    target = source;
  }

  return target;
};

_snake_case = function _snake_case(str) {
  return str.replace(/([A-Z])/g, function (_, match, index) {
    return '_' + match.toLowerCase();
  });
};

is_object = function is_object(obj) {
  return obj && _typeof(obj) === 'object' && !Array.isArray(obj);
};

is_object_literal = function is_object_literal(obj) {
  var test;
  test = obj;

  if (_typeof(obj) !== 'object' || obj === null) {
    return false;
  } else {
    while (!false) {
      if (Object.getPrototypeOf(test = Object.getPrototypeOf(test)) === null) {
        break;
      }
    }

    return Object.getPrototypeOf(obj) === test;
  }
};

export { _clone as clone, is_object, is_object_literal, merge, _mutate as mutate, _snake_case2 as snake_case };
