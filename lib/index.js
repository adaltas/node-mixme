// Generated by CoffeeScript 2.4.1
var _snake_case, clone, is_object, is_object_literal, merge, mutate, snake_case;

merge = function() {
  return mutate({}, ...arguments);
};

clone = function(target) {
  if (Array.isArray(target)) {
    return target.map(function(element) {
      return clone(element);
    });
  } else if (target && typeof target === 'object') {
    return mutate({}, target);
  } else {
    return target;
  }
};

mutate = function() {
  var i, j, name, ref, source, target, v;
  target = arguments[0];
  for (i = j = 1, ref = arguments.length; (1 <= ref ? j < ref : j > ref); i = 1 <= ref ? ++j : --j) {
    source = arguments[i];
    if (is_object_literal(source)) {
      if (!is_object_literal(target)) {
        target = {};
      }
      for (name in source) {
        target[name] = mutate(target[name], source[name]);
      }
    } else if (Array.isArray(source)) {
      target = (function() {
        var k, len, results;
        results = [];
        for (k = 0, len = source.length; k < len; k++) {
          v = source[k];
          results.push(mutate(void 0, v));
        }
        return results;
      })();
    } else if (source !== void 0) {
      target = source;
    }
  }
  return target;
};

snake_case = function(source, convert = true) {
  var name, src, target, u;
  target = {};
  if (is_object_literal(source)) {
    u = typeof convert === 'number' && convert > 0 ? convert - 1 : convert;
    for (name in source) {
      src = source[name];
      if (convert) {
        name = _snake_case(name);
      }
      target[name] = snake_case(src, u);
    }
  } else {
    target = source;
  }
  return target;
};

_snake_case = function(str) {
  return str.replace(/([A-Z])/g, function(_, match, index) {
    return '_' + match.toLowerCase();
  });
};

is_object = function(obj) {
  return obj && typeof obj === 'object' && !Array.isArray(obj);
};

is_object_literal = function(obj) {
  var test;
  test = obj;
  if (typeof obj !== 'object' || obj === null) {
    return false;
  } else {
    while (!false) {
      if (Object.getPrototypeOf(test = Object.getPrototypeOf(test)) === null) {
        break;
      }
    }
    return Object.getPrototypeOf(obj) === test;
  }
};

export {
  clone,
  is_object,
  is_object_literal,
  merge,
  mutate,
  snake_case
};
